{"version":3,"sources":["components/require_auth.js","store/reducers/index.js","store/reducers/auth.js","store/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_exports__","ComposedComponent","Authentication","_Component","Object","_Users_meetesh_Desktop_campusStoryNew_campus_story_backend_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_meetesh_Desktop_campusStoryNew_campus_story_backend_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_meetesh_Desktop_campusStoryNew_campus_story_backend_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","_Users_meetesh_Desktop_campusStoryNew_campus_story_backend_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_Users_meetesh_Desktop_campusStoryNew_campus_story_backend_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","props","authenticated","history","push","nextProps","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Component","contextTypes","router","PropTypes","object","connect","state","auth","rootReducer","combineReducers","length","undefined","action","type","payload","keepLoggedIn","sessionStorage","setItem","token","objectSpread","user_token","removeItem","store","createStore","compose","notFound","react_default","Loading","react_content_loader_es","x","y","width","height","LoginLoader","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","HomeLoader","HomeAdminLoader","Routes","Switch","Route","path","component","RequireAuth","exact","App","es","BrowserRouter","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5784933a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nexport default function (ComposedComponent) {\n  class Authentication extends Component {\n        static contextTypes = {\n          router: PropTypes.object\n        }\n\n        componentWillMount() {\n          if (!this.props.authenticated) {\n            this.props.history.push('/');\n          }\n        }\n\n        componentWillUpdate(nextProps) {\n          if (!nextProps.authenticated) {\n            this.props.history.push('/');\n          }\n        }\n\n        render() {\n          return <ComposedComponent {...this.props} />;\n        }\n  }\n\n  function mapStateToProps(state) {\n    return { authenticated: state.auth.authenticated };\n  }\n\n  return connect(mapStateToProps)(Authentication);\n}\n","import { combineReducers } from 'redux';\nimport { reducer as authReducer } from './auth';\n\nconst rootReducer = combineReducers({\n  auth: authReducer\n});\n\nexport default rootReducer;\n","export const reducer = (state = { authenticated: false }, action) => {\n    switch (action.type) {\n    case 'AUTH_USER':\n      if(action.payload.keepLoggedIn)\n        sessionStorage.setItem('token', action.payload.token);\n      return { ...state, authenticated: true, user_token: action.payload.token};\n    case 'UNAUTH_USER':\n      sessionStorage.removeItem('token');\n      return { ...state, authenticated: false };\n    default:\n      return state;\n    }\n  };\n  ","import { createStore, compose, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\n// import logger from 'redux-logger';\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    // applyMiddleware(logger),\n  )\n);\n\nexport default store;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport RequireAuth from '../components/require_auth';\nimport Loadable from 'react-loadable';\nimport ContentLoader from 'react-content-loader';\n\nconst notFound = () => <h1>Page not found</h1>;\n\nconst Loading = () => <ContentLoader>\n  <rect x=\"0\" y=\"2\" width=\"45\" height=\"15\" />\n  <rect x=\"50\" y=\"2\" width=\"45\" height=\"15\" />\n  <rect x=\"100\" y=\"2\" width=\"45\" height=\"15\" />\n  <rect x=\"0\" y=\"25\" width=\"300\" height=\"300\" />\n</ContentLoader>;\n\nconst LoginLoader = Loadable({\n  loader: () => import('../screens/Login'),\n  loading: Loading,\n});\nconst HomeLoader = Loadable({\n  loader: () => import('../screens/Home'),\n  loading: Loading,\n});\nconst HomeAdminLoader = Loadable({\n  loader: () => import('../screens/HomeAdmin'),\n  loading: Loading,\n});\n\nconst Routes = () => {\n  return (\n    <Switch>\n      {/* <Route path=\"/cdc\" component={RequireAuth(CDC)} /> */}\n      <Route path=\"/admin\" component={RequireAuth(HomeAdminLoader)} />\n      <Route exact path=\"/home\" component={RequireAuth(HomeLoader)} />\n      <Route exact path=\"/\" component={LoginLoader} />\n      <Route path=\"*\" component={RequireAuth(notFound)} />\n    </Switch>\n  );\n};\n\nexport default Routes;","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Routes from './routes';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n            <Routes/>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}